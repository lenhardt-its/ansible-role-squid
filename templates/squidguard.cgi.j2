#! /usr/bin/perl  -w
use strict;
use Socket;
#
# GLOBAL VALUES:
#
my ($clientaddr,$clientname,$clientuser,$clientgroup,$clientdomain,$clienttimestamp,$clientdebug,$clientport,$targetgroup,$url);
my (@supported,$image,$redirect,$autoinaddr,$proxy,$proxymaster);
my $lang="de";
my (%msgconf,%title,%logo,%msg,%tab,%word);
my ($protocol,$address,$port,$path,$refererhost,$referer);
my %Babel = ();
my $rechts="";
my $links="";
my $dummy="";
sub getpreferedlang(@);
sub parsequery($);
sub status($);
sub redirect($);
sub content($);
sub expires($);
sub msg($$);
sub gethostnames($);
sub spliturl($);
sub showhtml($);
sub showimage($$$);
sub showinaddr($$$$$);
#
# CONFIGURABLE OPTIONS:
#
# (Currently: "en", "fr", "de", "es", "nl", "no", "ru")
@supported   = (
  "en (English), ",
  "de (Deutsch), "
);
#
# Modifiy the values below to reflect you environment
# The image you define with "$image" and redirect will be displayed if the unappropriate
# url is of the type: gif, jpg, jpeg, png, mp3, mpg, mpeg, avi or mov.
#
$image       = "logo.svg";     # RELATIVE TO DOCUMENT_ROOT
$redirect    = "http://admin.your-domain/images/blocked.gif";          # "" TO AVOID REDIRECTION
$proxy       = "{{ ansible_hostname }}.{{ ansible_domain }}";                              # Your proxy server
$proxymaster = "hostmaster\@{{ ansible_hostname }}.{{ ansible_domain }}";                                 # The email of your proxy adminstrator
$autoinaddr  = 2;  # 0|1|2;
                   # 0 TO NOT REDIRECT
                   # 1 TO AUTORESOLVE & REDIRECT IF UNIQUE
                   # 2 TO AUTORESOLVE & REDIRECT TO FIRST NAME

########################################################################################
#
# SUBROUTINES:
#
#
# RETURN THE FIRST SUPPORTED LANGUAGE OF THE BROWSERS PREFERRED OR THE
# DEFAULT:
#
sub getpreferedlang(@) {
my @supported = @_;
my @languages = split(/\s*,\s*/,$ENV{"HTTP_ACCEPT_LANGUAGE"}) if(defined($ENV{"HTTP_ACCEPT_LANGUAGE"}));
my $lang;
my $supp;
push(@languages,$supported[0]);
for $lang (@languages) {
$lang =~ s/\s.*//;
$lang = substr($lang,0,2);
for $supp (@supported) {
  $supp =~ s/\s.*//;
  return($lang) if ($lang eq $supp);
}
}
}

#
# PARSE THE QUERY_STRING FOR KNOWN KEYS:
#
sub parsequery($) {
my $query       = shift;
my $clientaddr      = "$Babel{Unknown}";
my $clientname      = "$Babel{Unknown}";
my $clientuser      = "$Babel{Unknown}";
my $clientgroup     = "$Babel{Unknown}";
my $targetgroup     = "$Babel{Unknown}";
my $url             = "$Babel{Unknown}";
if (defined($query)) {
while ($query =~ /^\&?([^\&=]+)=\"([^\"]*)\"(.*)/ || $query =~ /^\&?([^\&=]+)=([^\&=]*)(.*)/) {
  my $key = $1;
  my $value = $2;
  $value = "$Babel{Unknown}" unless(defined($value) && $value && $value ne "unknown");
  $query = $3;
  if ($key =~ /^(clientaddr|clientname|clientuser|clientgroup|targetgroup|url)$/) {
eval "\$$key = \$value";
  }
  if ($query =~ /^url=(.*)/) {
$url = $1;
last;
  }
}
}
return($clientaddr,$clientname,$clientuser,$clientgroup,$targetgroup,$url);
}

#
# PRINT HTTP STATUS HEADER:
#
sub status($) {
my $status = shift;
print "Status: $status\n";
}

#
# PRINT HTTP LOCATION HEADER:
#
sub redirect($) {
my $location = shift;
print "Location: $location\n";
}

#
# PRINT HTTP CONTENT-TYPE HEARER:
#
sub content($) {
my $contenttype = shift;
print "Content-Type: $contenttype\n";
}

#
# PRINT HTTP LAST-MODIFIED AND EXPIRES HEARER:
#
sub expires($) {
my $ttl = shift;
my $time = time;
my @day = ("Sun","Mon","Tue","Wed","Thu","Fri","Sat");
my @month = ("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
my ($sec,$min,$hour,$mday,$mon,$year,$wday) = gmtime($time);
printf "Last-Modified: %s, %d %s %d", $day[$wday],$mday,$month[$mon],$year+1900;
printf " %02d:%02d:%02d GMT\n", $hour,$min,$sec;
($sec,$min,$hour,$mday,$mon,$year,$wday) = gmtime($time+$ttl);
printf "Expires: %s, %d %s %d", $day[$wday],$mday,$month[$mon],$year+1900;
printf " %02d:%02d:%02d GMT\n", $hour,$min,$sec;
}

#
# REVERSE LOOKUP AND RETURN NAMES:
#
sub gethostnames($) {
my $address = shift;
my ($name,$aliases) = gethostbyaddr(inet_aton($address), AF_INET);
my @names;
if (defined($name)) {
push(@names,$name);
if (defined($aliases) && $aliases) {
  for(split(/\s+/,$aliases)) {
next unless(/\./);
push(@names,$_);
  }
}
}
return(@names);
}

#
# SPLIT AN URL INTO PROTOCOL, ADDRESS, PORT AND PATH:
#
sub spliturl($) {
my $url      = shift;
my $protocol = "";
my $address  = "";
my $port     = "";
my $path     = "";
$url =~ /^([^\/:]+):\/\/([^\/:]+)(:\d*)?(.*)/;
$protocol = $1 if(defined($1));
$address  = $2 if(defined($2));
$port     = $3 if(defined($3));
$path     = $4 if(defined($4));
return($protocol,$address,$port,$path);
}

#
# SEND OUT AN IMAGE:
#
sub showimage($$$) {
my ($type,$file,$redirect) = @_;
content("image/$type");
expires(300);
redirect($redirect) if($redirect);
print "\n";
open(GIF, "$ENV{\"DOCUMENT_ROOT\"}$file");
print <GIF>;
close(GIF)
}

#
# SHOW THE INADDR ALERNATIVES WITH OPTIONAL ATOREDIRECT:
#
sub showinaddr($$$$$) {
my ($targetgroup,$protocol,$address,$port,$path) = @_;
my $msgid = $targetgroup;
my @names = gethostnames($address);
if($autoinaddr == 2 && @names || $autoinaddr && @names==1) {
status("301 Moved Permanently");
redirect("$protocol://$names[0]$port$path");
} elsif (@names>1) {
status("300 Multiple Choices");
} elsif (@names) {
status("301 Moved Permanently");
} else {
status("404 Not Found");
}
if (@names) {
print "Content-type: text/html\n\n\n";
print "<!DOCTYPE html PUBLIC \"-//W3C//DTD  HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n";
print "<html><head>\n";
print "<title>$Babel{Title}</title>\n";
print "</head>\n";
print "<body bgcolor=#FFFFFF> \n";
expires(0);
$msgid = "in-addr" unless(defined($msgconf{$msgid}));
if (defined($msgconf{$msgid})) {
  print "  <!-- showinaddr(\"$msgid\") -->\n";
  for (@{$msgconf{$msgid}}) {
my @config = split(/:/);
my $type = shift(@config);
if ($type eq "msg") {
  msg($config[0],$config[1]);
} elsif ($type eq "tab") {
  table(shift(@config),shift(@config),@config);
} elsif ($type eq "alternatives") {
  print "  <TABLE BORDER=0 ALIGN=CENTER>\n";
  for (@names) {
  print "   <TR>\n    <TH ALIGN=LEFT>\n     <FONT SIZE=+1>";
  href("$protocol://$_$port$path");
  print "\n     </FONT>\n    </TH>\n   </TR>\n";
  }
  print "  </TABLE>\n\n";
  if (defined($ENV{"HTTP_REFERER"}) && $ENV{"HTTP_REFERER"} =~ /:\/\/([^\/:]+)/) {
  $refererhost = $1;
  $referer = $ENV{"HTTP_REFERER"};
  msg("H4","referermaster");
  }
}
  }
}
}
return;
}

########################################################################################
#
#                                   MAIN   PROGRAM
#
# To change the messages in the blocked page please refer to the corresponding babel file.
#
$lang = getpreferedlang(@supported);

open (BABEL, "babel.$lang") || warn "Unable to open language file:   $!\n";
flock (BABEL, 2);
 while (<BABEL>) {
  chomp $_ ;
  ($links, $rechts) =  split (/=/, $_);
   $Babel{$links} = $rechts;
}
flock (BABEL, 8);
close (BABEL);

($clientaddr,$clientname,$clientuser,$clientgroup,$targetgroup,$url) = parsequery($ENV{"QUERY_STRING"});
($protocol,$address,$port,$path) = spliturl($url);

if ($url =~ /\.(gif|jpg|jpeg|png|mp3|mpg|mpeg|avi|mov)$/i) {
status("403 Forbidden");
showimage("gif",$image,$redirect);
exit 0;
}
if ($targetgroup eq "in-addr") {
 showinaddr($targetgroup,$protocol,$address,$port,$path);
}

$url =~ s/</&lt;/g ;
$url =~ s/>/&gt;/g ;

status("403 Forbidden");
expires(0);
print "Content-type: text/html\n\n\n";
print "<!DOCTYPE html>\n";
print "<html lang=\"en\">\n";
print "<head>\n";
print "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n";
print "     <title>403 Access Denied - $proxy</title>\n";
print "     <style>\n";
print "       .logo     { width: 400px; padding-left: 10px }\n";
print "       .line     { border-bottom: 1px solid black; position: absolute; }\n";
print "       .p-head   { align: center; padding-left: 0px; padding-right: 0px; font-size: 16px }\n";
print "       body      { align: center; background-color: white; text-align: center; color: black; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 0; }\n";
print "       header    { align: center; padding-bottom: 5px; padding-top: 10px; padding-left: 10px; background-color: #aa8c41; }\n";
print "       article   { align: center; padding-left: 10px; padding-right: 0px; }\n";
print "       footer    { align: center; padding-left: 10px; padding-right: 0px; }\n";
print "       p         { padding-left: 0px; padding-right: 0px; font-size: 12px }\n";
print "       hr        { margin-left: 0px; margin-right: 0px; border-collapse: collapse; border: 1px solid #999; }\n";
print "       code      { background-color: #eee; font-size: 16px; font-family: monospace; display: block; text-align: left; border: 1px solid #999; padding: 5px;}\n";
print "       table     { align: center; font-size: 16px; font-family: monospace; border: 1px solid #999; border-collapse: collapse; border-style: dotted; }\n";
print "       th        { padding-left: 3px; padding-right: 3px; border: 1px solid #999; border-collapse: collapse; border-style: dotted; }\n";
print "       td        { padding-left: 3px; padding-right: 3px; border: 1px solid #999; border-collapse: collapse; border-style: dotted; }\n";
print "       tr        { padding-left: 3px; padding-right: 3px; border: 1px solid #999; border-collapse: collapse; border-style: dotted; }\n";
print "       a:link    { color: #aa8c41; text-decoration: none; }\n";
print "       a:visited { color: #aa8c41; text-decoration: none; }\n";
print "       a:hover   { color: black; text-decoration: underline; }\n";
print "       a:active  { color: blue; text-decoration: underline; }\n";
print "    </style>\n";
print "</head>\n";
print "<body >\n";
print "  <header>\n";
print "    <h2>Website Access Denied</h2>\n";
print "  </header>\n";
print "  <article>\n";
print "    <p class=\"p-head\"><b>Informations</b></p>\n";
print "    <div align=\"center\">\n";
print "    <table border=\"1\">\n";
print "      <tr>\n";
print "        <td>ClientIP</td><td>&nbsp;$clientaddr</td>\n";
print "      </tr>\n";
print "      <tr>\n";
print "        <td>ClientName</td><td>&nbsp;$clientname</td>\n";
print "      </tr>\n";
print "      <tr>\n";
print "        <td>URL</td><td>&nbsp;$url</td>\n";
print "      </tr>\n";
print "      <tr>\n";
print "        <td>Port</td><td>&nbsp;$port</td>\n";
print "      </tr>\n";
print "      <tr>\n";
print "        <td>Protocol</td><td>&nbsp;$protocol</td>\n";
print "      </tr>\n";
print "    </table>\n";
print "    </div>\n";
print "  </article>\n";
print "  <footer>\n";
print "    <hr />\n";
print "    <h6>&copy; | Proxy: $proxy</h6>\n";
print "  </footer>\n";
print "</body>\n";
print "</html>\n";

exit 0 ;